create table nodebox_objs(
      writeid serial primary key,
      uri varchar(2048) NOT NULL,
      type varchar(255),
      graph varchar(2048) DEFAULT '/',
      version integer DEFAULT 0
);

create table nodebox_props (
    properties_of integer REFERENCES nodebox_objs (writeid) NOT NULL,
    property varchar(2048) NOT NULL,    
    value_index int DEFAULT 0,
    literal_value text,
    literal_type varchar(255) DEFAULT '',     
    object_ref varchar(2048),
    object_ref_version integer DEFAULT 0,
    PRIMARY KEY (properties_of, property, value_index)
);

insert into nodebox_objs (uri, type) VALUES ('http://hip.cat/emax', 'person');
insert into nodebox_objs (uri, type, version) VALUES ('http://hip.cat/emax', 'person', 1);
insert into nodebox_objs (uri, type, version) VALUES ('http://hip.cat/emax', 'person', 2);
insert into nodebox_props (properties_of, property, literal_value, literal_type) values (1, 'name', 'max', 'string'); 
select * from nodebox_objs FULL OUTER JOIN nodebox_props ON nodebox_objs.writeid = nodebox_props.properties_of;

select nodebox_objs.writeid, nodebox_objs.uri from nodebox_objs, (select uri,max(version) as highest_version from nodebox_objs group by uri) as maxver where nodebox_objs.uri=maxver.uri AND nodebox_objs.version=maxver.highest_version; 

create table IF NOT EXISTS things ( id serial, uri varchar(255) NOT NULL, type varchar(255), graph varchar(255), version integer DEFAULT 0, data text );

DROP FUNCTION notify_trigger();

CREATE FUNCTION notify_trigger() RETURNS trigger AS $$
DECLARE
BEGIN
  PERFORM pg_notify('change_' || TG_TABLE_NAME, TG_TABLE_NAME || ',id,' || NEW.id );
  RETURN new;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER watched_table_trigger AFTER INSERT ON things FOR EACH ROW EXECUTE PROCEDURE notify_trigger();

